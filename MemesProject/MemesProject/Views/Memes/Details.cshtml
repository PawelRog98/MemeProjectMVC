@model MemesProject.Models.Meme
@using MemesProject.Models.ViewModels;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Details";
}

<div>
    <hr />
    <div class="center shadow-full">
        <div class="memecontainer">
            <div class="rounded item">
                <div class="memetitle"> @Html.DisplayFor(model => model.Title) </div>
                <div class="Buttons-Row">



                    @Html.ActionLink(Model.IdUser,"GetUserInformation","User",new { id = Model.IdUser })

                    @if (User.IsInRole(ST.AdminRole))
                    {
                        @if (!Model.IfBlocked.Value)
                        {

                            <a id="@Model.IdMeme" class="btn btn-danger BlockMeme">Block Meme</a>


                        }
                        else
                        {
                            <a id="@Model.IdMeme" class="btn btn-danger UnBlockMeme">UnBlock Meme</a>
                        }
                    }
                </div>

                @if (!Model.IfBlocked.Value)
                {
                    <a asp-action="Details" asp-route-id="@Model.IdMeme">
                        @{
                            string base64 = Convert.ToBase64String(Model.File);
                            string imagesrc = "data:image/png;base64," + base64;
                        }
                        <img src="@imagesrc" class="imgmiddle" alt="@Model.DescriptionAlt">

                    </a>
                }
                else
                {
                    <a asp-action="Details" asp-route-id="@Model.IdMeme">
                        <img src="~/images/blockedImage.png" class="imgmiddle" alt="Image is Blocked">
                    </a>
                }

                <row class="buttons">
                    <button class="transbutton">

                        @if (Model.IsFavourited)
                        {
                            <img src="/images/heart.png" id="@Model.IdMeme" class="UnLikeImage" alt="Remove an image from Favourites" >
                        }
                        else
                        {
                            <img src="/images/heartEmpty.png" id="@Model.IdMeme" class="likeImage" alt="Add an image to Favourites" >
                        }
                    </button>
                    <button class="transbutton">
                        @if (Model.IsLiked)
                        {
                            <img src="/images/likeFull.png" id="@Model.IdMeme" class="UnfavouriteImage" alt=Unlike Image">
                        }
                        else
                        {
                            <img src="/images/like.png" id="@Model.IdMeme" class="favouriteImage" alt="Like Image" >
                        }
                        <div id="numberLike @Model.IdMeme">@Model.Likes</div>

                    </button>
                </row>
            </div>
            <div class="Buttons-Row">
                @if((User.IsInRole(ST.AdminRole)) || String.Equals(@HttpContextAccessor.HttpContext.Session.GetString(ST.SessionUserName), @Model.IdUser))
                {
                      <a asp-action="Edit" asp-route-id="@Model.IdMeme">
                    <img id="imageid" src="/images/icons8-edit-96.png" title="Edycja" alt="Edytuj" class="Buttons-Medium BaseEdit">
                </a>
                }

                <a asp-action="Delete" asp-route-id="@Model.IdMeme">
                    <img id="imageid" src="/images/icons8-trash-96.png" title="Usuwanie" alt="Usuń" class="Buttons-Medium BaseDelete">
                </a>
            </div>
        </div>
    </div>
    <br />

    @{
        await Html.RenderPartialAsync("_CommentsHubCreatePartial", new CommentViewModel { IdMeme = Model.IdMeme });
    }

</div>


@section Scripts {
<div hidden>
    @{
    await Html.RenderPartialAsync("_CommentsHubCreatePartial", new CommentViewModel { IdMeme=Model.IdMeme });
    }
</div>

}